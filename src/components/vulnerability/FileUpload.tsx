import { useRef, useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Upload, FileText, AlertCircle } from 'lucide-react';
import { useFileUpload, ParsedData } from '@/hooks/useFileUpload';
import { cn } from '@/lib/utils';

interface FileUploadProps {
  onFileUploaded: (data: ParsedData) => void;
}

export const FileUpload = ({ onFileUploaded }: FileUploadProps) => {
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [dragActive, setDragActive] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { uploadFile, isLoading, progress, progressText } = useFileUpload();

  const handleFileSelect = async (file: File) => {
    setError(null);
    try {
      const result = await uploadFile(file);
      onFileUploaded(result);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    }
  };

  const handleDrag = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);

    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      handleFileSelect(e.dataTransfer.files[0]);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      handleFileSelect(e.target.files[0]);
    }
  };

  const openFileDialog = () => {
    fileInputRef.current?.click();
  };

  return (
    <Card className="bg-gradient-card shadow-card">
      <CardHeader className="text-center">
        <CardTitle className="flex items-center justify-center gap-2">
          <FileText className="h-5 w-5 text-primary" />
          Import Vulnerability Data
        </CardTitle>
        <CardDescription>
          Upload CSV or Excel files containing vulnerability data
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div
          className={cn(
            "relative border-2 border-dashed rounded-lg p-8 text-center transition-all duration-300",
            dragActive
              ? "border-primary bg-primary/5 scale-105"
              : "border-muted-foreground/25 hover:border-primary/50",
            isLoading && "pointer-events-none opacity-50"
          )}
          onDragEnter={handleDrag}
          onDragLeave={handleDrag}
          onDragOver={handleDrag}
          onDrop={handleDrop}
        >
          <input
            ref={fileInputRef}
            type="file"
            accept=".csv,.xlsx,.xls"
            onChange={handleInputChange}
            className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
            disabled={isLoading}
          />
          
          {isLoading ? (
            <div className="space-y-4">
              <div className="animate-pulse">
                <Upload className="h-12 w-12 mx-auto text-primary" />
              </div>
              <div className="space-y-2">
                <p className="text-sm font-medium">{progressText}</p>
                <Progress value={progress} variant="cyber" className="h-2" />
                <p className="text-xs text-muted-foreground">{Math.round(progress)}%</p>
              </div>
            </div>
          ) : (
            <div className="space-y-4">
              <Upload className="h-12 w-12 mx-auto text-muted-foreground transition-colors group-hover:text-primary" />
              <div className="space-y-2">
                <p className="text-lg font-medium">
                  Drag & drop files here
                </p>
                <p className="text-sm text-muted-foreground">
                  or click to browse files
                </p>
                <Button
                  variant="outline"
                  onClick={openFileDialog}
                  className="mt-4"
                >
                  <FileText className="h-4 w-4 mr-2" />
                  Select File
                </Button>
              </div>
            </div>
          )}
        </div>

        {error && (
          <div className="mt-4 p-4 bg-destructive/10 border border-destructive/20 rounded-lg">
            <div className="flex items-center gap-2 text-destructive">
              <AlertCircle className="h-4 w-4" />
              <p className="text-sm font-medium">Error</p>
            </div>
            <p className="text-sm text-destructive/80 mt-1">{error}</p>
          </div>
        )}

        <div className="mt-4 text-xs text-muted-foreground">
          <p>Supported formats: CSV, Excel (.xlsx, .xls)</p>
          <p>Expected columns: ID, Title/CVE, Asset, Severity, CVSS Score</p>
        </div>
      </CardContent>
    </Card>
  );
};