import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Vulnerability } from '@/types/vulnerability';
import { Server } from 'lucide-react';

interface AssetTableProps {
  vulnerabilities: Vulnerability[];
}

export const AssetTable = ({ vulnerabilities }: AssetTableProps) => {
  const assetCount = vulnerabilities.reduce((acc, vuln) => {
    const asset = vuln.asset || 'Unknown';
    acc[asset] = (acc[asset] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  const sortedAssets = Object.entries(assetCount)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 10);

  const getRiskLevel = (count: number) => {
    const total = vulnerabilities.length;
    const percentage = (count / total) * 100;
    
    if (percentage >= 20) return { level: 'Critical', variant: 'destructive' as const };
    if (percentage >= 10) return { level: 'High', variant: 'secondary' as const };
    if (percentage >= 5) return { level: 'Medium', variant: 'outline' as const };
    return { level: 'Low', variant: 'outline' as const };
  };

  return (
    <Card className="bg-gradient-card shadow-card">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Server className="h-5 w-5 text-primary" />
          Top 10 Assets by Vulnerability Count
        </CardTitle>
        <CardDescription>
          Assets with the highest number of vulnerabilities
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Rank</TableHead>
              <TableHead>Asset</TableHead>
              <TableHead className="text-right">Vulnerabilities</TableHead>
              <TableHead className="text-right">Percentage</TableHead>
              <TableHead>Risk Level</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {sortedAssets.map(([asset, count], index) => {
              const percentage = ((count / vulnerabilities.length) * 100).toFixed(1);
              const risk = getRiskLevel(count);
              
              return (
                <TableRow key={asset}>
                  <TableCell className="font-medium">#{index + 1}</TableCell>
                  <TableCell className="font-mono text-sm max-w-xs truncate">
                    {asset}
                  </TableCell>
                  <TableCell className="text-right font-semibold">
                    {count}
                  </TableCell>
                  <TableCell className="text-right text-muted-foreground">
                    {percentage}%
                  </TableCell>
                  <TableCell>
                    <Badge variant={risk.variant}>
                      {risk.level}
                    </Badge>
                  </TableCell>
                </TableRow>
              );
            })}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
};