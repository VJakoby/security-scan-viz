import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { FileUpload } from './FileUpload';
import { ColumnMapping } from './ColumnMapping';
import { VulnerabilitySummary } from './VulnerabilitySummary';
import { VulnerabilityTable } from './VulnerabilityTable';
import { SeverityChart } from './SeverityChart';
import { ProtocolChart } from './ProtocolChart';
import { ServicePortTable } from './ServicePortTable';
import { AssetChart } from './AssetChart';
import { AssetTable } from './AssetTable';
import { IpChart } from './IpChart';
import { IpTable } from './IpTable';
import { ScoreChart } from './ScoreChart';
import { FrequencyTable } from './FrequencyTable';
import { useVulnerabilityData } from '@/hooks/useVulnerabilityData';
import { useHtmlExport } from '@/hooks/useHtmlExport';
import { useStandaloneExport } from '@/hooks/useStandaloneExport';
import { ParsedData } from '@/hooks/useFileUpload';
import { ColumnMapping as ColumnMappingType, VisualizationOptions } from '@/types/vulnerability';
import { Trash2, Database, Download } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

type DashboardStep = 'upload' | 'mapping' | 'dashboard';

export const VulnerabilityDashboard = () => {
  const [step, setStep] = useState<DashboardStep>('upload');
  const [parsedData, setParsedData] = useState<ParsedData | null>(null);
  const { toast } = useToast();
  
  const {
    vulnerabilities,
    customerName,
    visualizations,
    mapData,
    saveData,
    clearData,
    getSeverityCount,
    getTopVulnerabilitiesBySeverity,
    getProtocolCount
  } = useVulnerabilityData();
  
  const { exportToHtml } = useHtmlExport();
  const { exportStandaloneHtml } = useStandaloneExport();

  const handleFileUploaded = (data: ParsedData) => {
    setParsedData(data);
    setStep('mapping');
    toast({
      title: "File uploaded successfully",
      description: `Loaded ${data.rows.length} rows. Configure column mapping to continue.`,
    });
  };

  const handleMappingComplete = (mapping: ColumnMappingType, customer: string, visualizationOptions: VisualizationOptions) => {
    if (!parsedData) return;
    
    const mappedVulnerabilities = mapData(parsedData.rows, mapping);
    saveData(mappedVulnerabilities, customer, visualizationOptions);
    setStep('dashboard');
    toast({
      title: "Data loaded successfully",
      description: `Processed ${mappedVulnerabilities.length} vulnerabilities.`,
    });
  };

  const handleClearData = () => {
    clearData();
    setParsedData(null);
    setStep('upload');
    toast({
      title: "Data cleared",
      description: "All vulnerability data has been removed.",
    });
  };

  const severityCount = getSeverityCount();
  const protocolCount = getProtocolCount();
  const totalVulnerabilities = vulnerabilities.length;

  // Check if we have stored data on initial load
  if (step === 'upload' && totalVulnerabilities > 0) {
    setStep('dashboard');
  }

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <div className="border-b bg-gradient-dark">
        <div className="container mx-auto px-6 py-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-4xl font-bold text-white mb-2">
                Vulnerability Dashboard
                {customerName && <span className="text-2xl text-primary ml-3">- {customerName}</span>}
              </h1>
              <p className="text-white/80">
                Comprehensive security vulnerability analysis and reporting
              </p>
            </div>
            {step === 'dashboard' && (
              <div className="flex gap-3">
                <Button
                  variant="outline"
                  onClick={() => exportToHtml(vulnerabilities, customerName)}
                  disabled={vulnerabilities.length === 0}
                  className="text-primary border-primary/20 hover:bg-primary/10 hover:text-primary"
                >
                  <Download className="h-4 w-4 mr-2" />
                  Export Report
                </Button>
                <Button
                  variant="outline"
                  onClick={exportStandaloneHtml}
                  className="text-primary border-primary/20 hover:bg-primary/10 hover:text-primary"
                >
                  <Download className="h-4 w-4 mr-2" />
                  Export Standalone App
                </Button>
                <Button
                  variant="outline"
                  onClick={() => setStep('upload')}
                  className="text-primary border-primary/20 hover:bg-primary/10 hover:text-primary"
                >
                  <Database className="h-4 w-4 mr-2" />
                  Load New Data
                </Button>
                <Button
                  variant="destructive"
                  onClick={handleClearData}
                >
                  <Trash2 className="h-4 w-4 mr-2" />
                  Clear Data
                </Button>
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="container mx-auto px-6 py-8">
        {step === 'upload' && (
          <div className="max-w-2xl mx-auto">
            <FileUpload onFileUploaded={handleFileUploaded} />
          </div>
        )}

        {step === 'mapping' && parsedData && (
          <div className="max-w-4xl mx-auto">
            <ColumnMapping
              headers={parsedData.headers}
              onMappingComplete={handleMappingComplete}
            />
          </div>
        )}

        {step === 'dashboard' && totalVulnerabilities > 0 && (
          <div className="space-y-8">
            {/* Summary and Chart Row */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              <div className="lg:col-span-1">
                <VulnerabilitySummary
                  severityCount={severityCount}
                  totalVulnerabilities={totalVulnerabilities}
                  protocolCount={protocolCount}
                  customerName={customerName}
                />
              </div>
              <div className="lg:col-span-2">
                <SeverityChart severityCount={severityCount} />
              </div>
            </div>

            {/* Service Port Chart - Always shown */}
            <div className="mb-8">
              <ProtocolChart vulnerabilities={vulnerabilities} />
            </div>

            {/* Custom Visualizations */}
            <div className="grid grid-cols-1 xl:grid-cols-2 gap-6 mb-8">
              {visualizations.asset === 'chart' && (
                <AssetChart vulnerabilities={vulnerabilities} />
              )}
              {visualizations.asset === 'table' && (
                <AssetTable vulnerabilities={vulnerabilities} />
              )}
              {visualizations.ipAddress === 'chart' && (
                <IpChart vulnerabilities={vulnerabilities} />
              )}
              {visualizations.ipAddress === 'table' && (
                <IpTable vulnerabilities={vulnerabilities} />
              )}
              {visualizations.score === 'chart' && (
                <ScoreChart vulnerabilities={vulnerabilities} />
              )}
              {visualizations.id === 'table' && (
                <FrequencyTable vulnerabilities={vulnerabilities} field="id" />
              )}
              {visualizations.title === 'table' && (
                <FrequencyTable vulnerabilities={vulnerabilities} field="title" />
              )}
            </div>

            {/* Vulnerability Tables */}
            <div className="grid grid-cols-1 xl:grid-cols-2 gap-6">
              <VulnerabilityTable
                title="Top 10 Critical Vulnerabilities"
                vulnerabilities={getTopVulnerabilitiesBySeverity('Critical', 10)}
                severity="Critical"
              />
              <VulnerabilityTable
                title="Top 10 High Vulnerabilities"
                vulnerabilities={getTopVulnerabilitiesBySeverity('High', 10)}
                severity="High"
              />
            </div>

            <div className="grid grid-cols-1 xl:grid-cols-2 gap-6">
              <VulnerabilityTable
                title="Top 10 Medium Vulnerabilities"
                vulnerabilities={getTopVulnerabilitiesBySeverity('Medium', 10)}
                severity="Medium"
              />
              <VulnerabilityTable
                title="Top 10 Low Vulnerabilities"
                vulnerabilities={getTopVulnerabilitiesBySeverity('Low', 10)}
                severity="Low"
              />
            </div>
          </div>
        )}

        {step === 'dashboard' && totalVulnerabilities === 0 && (
          <div className="max-w-2xl mx-auto">
            <Card className="bg-gradient-card shadow-card">
              <CardHeader>
                <CardTitle>No Data Available</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-muted-foreground mb-4">
                  No vulnerability data found. Upload a file to get started.
                </p>
                <Button onClick={() => setStep('upload')}>
                  <Database className="h-4 w-4 mr-2" />
                  Upload Data
                </Button>
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    </div>
  );
};