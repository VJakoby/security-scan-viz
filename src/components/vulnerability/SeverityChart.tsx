import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';
import { SeverityCount } from '@/types/vulnerability';
import { BarChart3 } from 'lucide-react';

interface SeverityChartProps {
  severityCount: SeverityCount;
}

const COLORS = {
  Critical: 'hsl(var(--critical))',
  High: 'hsl(var(--high))',
  Medium: 'hsl(var(--medium))',
  Low: 'hsl(var(--low))',
  Unknown: 'hsl(var(--muted-foreground))'
};

export const SeverityChart = ({ severityCount }: SeverityChartProps) => {
  const data = Object.entries(severityCount)
    .filter(([_, count]) => count > 0)
    .map(([severity, count]) => ({
      name: severity,
      value: count,
      color: COLORS[severity as keyof typeof COLORS]
    }));

  const total = Object.values(severityCount).reduce((sum, count) => sum + count, 0);

  if (total === 0) {
    return (
      <Card className="bg-gradient-card shadow-card">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <BarChart3 className="h-5 w-5 text-primary" />
            Severity Distribution
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-8 text-muted-foreground">
            <p>No data to display</p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="bg-gradient-card shadow-card">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <BarChart3 className="h-5 w-5 text-primary" />
          Severity Distribution
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="h-64">
          <ResponsiveContainer width="100%" height="100%">
            <PieChart>
              <Pie
                data={data}
                dataKey="value"
                nameKey="name"
                cx="50%"
                cy="50%"
                outerRadius={80}
                innerRadius={40}
                paddingAngle={2}
              >
                {data.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={entry.color} />
                ))}
              </Pie>
              <Tooltip 
                formatter={(value, name) => [value, name]}
                labelStyle={{ color: 'hsl(var(--foreground))' }}
                contentStyle={{ 
                  backgroundColor: 'hsl(var(--card))',
                  border: '1px solid hsl(var(--border))',
                  borderRadius: '8px'
                }}
              />
              <Legend 
                verticalAlign="bottom" 
                height={36}
                wrapperStyle={{ color: 'hsl(var(--foreground))' }}
              />
            </PieChart>
          </ResponsiveContainer>
        </div>
        
        <div className="mt-4 space-y-2">
          <p className="text-sm font-medium text-center">
            Total Vulnerabilities: {total}
          </p>
          <div className="grid grid-cols-2 gap-2 text-xs">
            {Object.entries(severityCount).map(([severity, count]) => (
              count > 0 && (
                <div key={severity} className="flex justify-between">
                  <span className="flex items-center gap-2">
                    <div 
                      className="w-3 h-3 rounded-full" 
                      style={{ backgroundColor: COLORS[severity as keyof typeof COLORS] }}
                    />
                    {severity}
                  </span>
                  <span className="font-mono">{count}</span>
                </div>
              )
            ))}
          </div>
        </div>
      </CardContent>
    </Card>
  );
};