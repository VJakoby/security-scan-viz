import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Checkbox } from '@/components/ui/checkbox';
import { Settings, Play } from 'lucide-react';
import { ColumnMapping as ColumnMappingType, VisualizationOptions } from '@/types/vulnerability';

interface ColumnMappingProps {
  headers: string[];
  onMappingComplete: (mapping: ColumnMappingType, customerName: string, visualizations: VisualizationOptions) => void;
}

export const ColumnMapping = ({ headers, onMappingComplete }: ColumnMappingProps) => {
  const [mapping, setMapping] = useState<ColumnMappingType>({
    id: '-',
    title: '-',
    asset: '-',
    ipAddress: '-',
    severity: '-',
    score: '-',
    protocol: '-'
  });
  const [customerName, setCustomerName] = useState<string>('');
  const [enabledFields, setEnabledFields] = useState<Record<keyof ColumnMappingType, boolean>>({
    id: true,
    title: true,
    asset: true,
    ipAddress: true,
    severity: true,
    score: true,
    protocol: true
  });
  const [visualizations, setVisualizations] = useState<VisualizationOptions>({
    id: 'none',
    title: 'none', 
    asset: 'none',
    ipAddress: 'none',
    score: 'none',
    protocol: 'chart'
  });

  // Auto-guess mapping when headers change
  useEffect(() => {
    const guessMapping = (): ColumnMappingType => {
      const mappingGuesses = {
        id: ['id', 'cve', 'vuln id', 'vulnerability id', 'vuln_id'],
        title: ['title', 'cve', 'name', 'description', 'summary'],
        asset: ['asset', 'host', 'hostname', 'device', 'target'],
        ipAddress: ['ip', 'ip address', 'ip_address', 'ipaddress'],
        severity: ['severity', 'risk', 'level', 'priority'],
        score: ['score', 'cvss', 'cvss score', 'cvssv3', 'cvss v3', 'cvssv2', 'cvss v2', 'cvss_score'],
        protocol: ['protocol', 'port', 'service', 'protocol_port', 'service_port']
      };

      const result: ColumnMappingType = {
        id: '-',
        title: '-',
        asset: '-',
        ipAddress: '-',
        severity: '-',
        score: '-',
        protocol: '-'
      };

      Object.entries(mappingGuesses).forEach(([field, keywords]) => {
        const found = headers.find(header => {
          const lowerHeader = header.toLowerCase();
          return keywords.some(keyword => lowerHeader.includes(keyword));
        });
        if (found) {
          (result as any)[field] = found;
        }
      });

      return result;
    };

    if (headers.length > 0) {
      setMapping(guessMapping());
    }
  }, [headers]);

  const handleMappingChange = (field: keyof ColumnMappingType, value: string) => {
    setMapping(prev => ({ ...prev, [field]: value }));
  };

  const handleFieldToggle = (field: keyof ColumnMappingType, enabled: boolean) => {
    setEnabledFields(prev => ({ ...prev, [field]: enabled }));
    if (!enabled) {
      setMapping(prev => ({ ...prev, [field]: '-' }));
      // Reset visualization when field is disabled
      if (field !== 'protocol') {
        setVisualizations(prev => ({ ...prev, [field]: 'none' as any }));
      }
    }
  };

  const handleVisualizationChange = (field: keyof VisualizationOptions, value: string) => {
    setVisualizations(prev => ({ ...prev, [field]: value as any }));
  };

  const handleSubmit = () => {
    // Only include enabled fields in the mapping
    const filteredMapping = Object.keys(mapping).reduce((acc, key) => {
      const fieldKey = key as keyof ColumnMappingType;
      acc[fieldKey] = enabledFields[fieldKey] ? mapping[fieldKey] : '-';
      return acc;
    }, {} as ColumnMappingType);
    
    onMappingComplete(filteredMapping, customerName, visualizations);
  };

  const mappingFields = [
    { 
      key: 'id' as const, 
      label: 'ID / CVE', 
      description: 'Unique identifier for the vulnerability',
      visualOptions: [
        { value: 'none', label: 'No visualization' },
        { value: 'table', label: 'Top 10 table' }
      ]
    },
    { 
      key: 'title' as const, 
      label: 'Title / Name', 
      description: 'Vulnerability title or description',
      visualOptions: [
        { value: 'none', label: 'No visualization' },
        { value: 'table', label: 'Top 10 table' }
      ]
    },
    { 
      key: 'asset' as const, 
      label: 'Asset / Host', 
      description: 'Affected system or device name',
      visualOptions: [
        { value: 'none', label: 'No visualization' },
        { value: 'chart', label: 'Pie chart' },
        { value: 'table', label: 'Top 10 table' }
      ]
    },
    { 
      key: 'ipAddress' as const, 
      label: 'IP Address', 
      description: 'IP address of the affected system',
      visualOptions: [
        { value: 'none', label: 'No visualization' },
        { value: 'chart', label: 'Pie chart' },
        { value: 'table', label: 'Top 10 table' }
      ]
    },
    { 
      key: 'severity' as const, 
      label: 'Severity', 
      description: 'Risk level (Critical, High, Medium, Low) - Always shown in standard charts',
      visualOptions: []
    },
    { 
      key: 'score' as const, 
      label: 'CVSS Score', 
      description: 'Numerical risk score (0-10)',
      visualOptions: [
        { value: 'none', label: 'No visualization' },
        { value: 'chart', label: 'Distribution chart' }
      ]
    },
    { 
      key: 'protocol' as const, 
      label: 'Protocol / Port', 
      description: 'Protocol or port information - Always shown as pie chart',
      visualOptions: []
    }
  ];

  return (
    <Card className="bg-gradient-card shadow-card">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Settings className="h-5 w-5 text-primary" />
          Column Mapping
        </CardTitle>
        <CardDescription>
          Map your file columns to vulnerability data fields. Select '-' to ignore a field.
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Customer Name Input */}
        <div className="space-y-2">
          <Label htmlFor="customerName" className="text-base font-semibold">
            Customer Name (Optional)
          </Label>
          <Input
            id="customerName"
            value={customerName}
            onChange={(e) => setCustomerName(e.target.value)}
            placeholder="Enter customer name for report branding"
            className="border-border focus:border-primary"
          />
          <p className="text-sm text-muted-foreground">
            This will appear on the dashboard and exported reports
          </p>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {mappingFields.map(({ key, label, description, visualOptions }) => (
            <div key={key} className="space-y-3 p-4 border rounded-lg bg-background/50">
              <div className="flex items-center space-x-2">
                <Checkbox
                  id={`${key}-enabled`}
                  checked={enabledFields[key]}
                  onCheckedChange={(checked) => handleFieldToggle(key, !!checked)}
                />
                <Label htmlFor={key} className="text-sm font-medium">
                  {label}
                </Label>
              </div>
              
              {enabledFields[key] && (
                <>
                  <Select
                    value={mapping[key]}
                    onValueChange={(value) => handleMappingChange(key, value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select column" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="-">- (ignore)</SelectItem>
                      {headers.map(header => (
                        <SelectItem key={header} value={header}>
                          {header}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>

                  {visualOptions.length > 0 && mapping[key] !== '-' && (
                    <div className="space-y-2">
                      <Label className="text-xs font-medium text-muted-foreground">
                        Visualization
                      </Label>
                      <Select
                        value={visualizations[key as keyof VisualizationOptions]}
                        onValueChange={(value) => handleVisualizationChange(key as keyof VisualizationOptions, value)}
                      >
                        <SelectTrigger className="h-8">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          {visualOptions.map(option => (
                            <SelectItem key={option.value} value={option.value}>
                              {option.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  )}
                </>
              )}
              
              <p className="text-xs text-muted-foreground">{description}</p>
            </div>
          ))}
        </div>


        <Button 
          onClick={handleSubmit} 
          className="w-full bg-primary hover:bg-primary/90"
          disabled={!customerName.trim()}
        >
          Load Data
        </Button>
      </CardContent>
    </Card>
  );
};