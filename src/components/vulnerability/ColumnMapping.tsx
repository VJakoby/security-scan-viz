import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { Settings, Play } from 'lucide-react';
import { ColumnMapping as ColumnMappingType } from '@/types/vulnerability';

interface ColumnMappingProps {
  headers: string[];
  onMappingComplete: (mapping: ColumnMappingType) => void;
}

export const ColumnMapping = ({ headers, onMappingComplete }: ColumnMappingProps) => {
  const [mapping, setMapping] = useState<ColumnMappingType>({
    id: '-',
    title: '-',
    asset: '-',
    ipAddress: '-',
    severity: '-',
    score: '-'
  });

  // Auto-guess mapping when headers change
  useEffect(() => {
    const guessMapping = (): ColumnMappingType => {
      const mappingGuesses = {
        id: ['id', 'cve', 'vuln id', 'vulnerability id', 'vuln_id'],
        title: ['title', 'cve', 'name', 'description', 'summary'],
        asset: ['asset', 'host', 'hostname', 'device', 'target'],
        ipAddress: ['ip', 'ip address', 'ip_address', 'ipaddress'],
        severity: ['severity', 'risk', 'level', 'priority'],
        score: ['score', 'cvss', 'cvss score', 'cvssv3', 'cvss v3', 'cvssv2', 'cvss v2', 'cvss_score']
      };

      const result: ColumnMappingType = {
        id: '-',
        title: '-',
        asset: '-',
        ipAddress: '-',
        severity: '-',
        score: '-'
      };

      Object.entries(mappingGuesses).forEach(([field, keywords]) => {
        const found = headers.find(header => {
          const lowerHeader = header.toLowerCase();
          return keywords.some(keyword => lowerHeader.includes(keyword));
        });
        if (found) {
          result[field as keyof ColumnMappingType] = found;
        }
      });

      return result;
    };

    if (headers.length > 0) {
      setMapping(guessMapping());
    }
  }, [headers]);

  const handleMappingChange = (field: keyof ColumnMappingType, value: string) => {
    setMapping(prev => ({ ...prev, [field]: value }));
  };

  const handleSubmit = () => {
    onMappingComplete(mapping);
  };

  const mappingFields = [
    { key: 'id' as const, label: 'ID / CVE', description: 'Unique identifier for the vulnerability' },
    { key: 'title' as const, label: 'Title / Name', description: 'Vulnerability title or description' },
    { key: 'asset' as const, label: 'Asset / Host', description: 'Affected system or device name' },
    { key: 'ipAddress' as const, label: 'IP Address', description: 'IP address of the affected system' },
    { key: 'severity' as const, label: 'Severity', description: 'Risk level (Critical, High, Medium, Low)' },
    { key: 'score' as const, label: 'CVSS Score', description: 'Numerical risk score (0-10)' }
  ];

  return (
    <Card className="bg-gradient-card shadow-card">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Settings className="h-5 w-5 text-primary" />
          Column Mapping
        </CardTitle>
        <CardDescription>
          Map your file columns to vulnerability data fields. Select '-' to ignore a field.
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {mappingFields.map(({ key, label, description }) => (
            <div key={key} className="space-y-2">
              <Label htmlFor={key} className="text-sm font-medium">
                {label}
              </Label>
              <Select
                value={mapping[key]}
                onValueChange={(value) => handleMappingChange(key, value)}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select column" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="-">- (ignore)</SelectItem>
                  {headers.map(header => (
                    <SelectItem key={header} value={header}>
                      {header}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <p className="text-xs text-muted-foreground">{description}</p>
            </div>
          ))}
        </div>

        <Button 
          onClick={handleSubmit} 
          className="w-full bg-gradient-cyber hover:shadow-glow transition-all duration-300"
          size="lg"
        >
          <Play className="h-4 w-4 mr-2" />
          Load Data
        </Button>
      </CardContent>
    </Card>
  );
};