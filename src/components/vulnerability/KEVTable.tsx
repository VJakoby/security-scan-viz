import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { AlertTriangle, ExternalLink } from 'lucide-react';
import { KEVMatch } from '@/types/vulnerability';

interface KEVTableProps {
  kevMatches: KEVMatch[];
  limit?: number;
}

export const KEVTable = ({ kevMatches, limit = 10 }: KEVTableProps) => {
  const displayMatches = limit ? kevMatches.slice(0, limit) : kevMatches;

  const getRiskBadgeColor = (knownRansomware: string) => {
    switch (knownRansomware?.toLowerCase()) {
      case 'known':
        return 'destructive';
      case 'unknown':
        return 'secondary';
      default:
        return 'outline';
    }
  };

  const formatDate = (dateString: string) => {
    try {
      return new Date(dateString).toLocaleDateString();
    } catch {
      return dateString;
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <AlertTriangle className="h-5 w-5 text-destructive" />
          Top {limit} KEV (Known Exploitable Vulnerabilities)
          <Badge variant="secondary">{kevMatches.length} Total</Badge>
        </CardTitle>
      </CardHeader>
      <CardContent>
        {displayMatches.length === 0 ? (
          <div className="text-center py-8 text-muted-foreground">
            No Known Exploitable Vulnerabilities found in the current dataset.
          </div>
        ) : (
          <div className="rounded-md border">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>CVE ID</TableHead>
                  <TableHead>Vulnerability Name</TableHead>
                  <TableHead>Vendor/Product</TableHead>
                  <TableHead>Score</TableHead>
                  <TableHead>Asset</TableHead>
                  <TableHead>Ransomware Use</TableHead>
                  <TableHead>Due Date</TableHead>
                  <TableHead>Details</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {displayMatches.map((match, index) => (
                  <TableRow key={`${match.kevEntry.cveID}-${index}`}>
                    <TableCell className="font-mono text-sm">
                      {match.kevEntry.cveID}
                    </TableCell>
                    <TableCell className="max-w-xs">
                      <div className="truncate" title={match.kevEntry.vulnerabilityName}>
                        {match.kevEntry.vulnerabilityName}
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="text-sm">
                        <div className="font-medium">{match.kevEntry.vendorProject}</div>
                        <div className="text-muted-foreground">{match.kevEntry.product}</div>
                      </div>
                    </TableCell>
                    <TableCell>
                      <Badge variant="destructive">{match.vulnerability.score}</Badge>
                    </TableCell>
                    <TableCell className="max-w-xs">
                      <div className="truncate" title={match.vulnerability.asset}>
                        {match.vulnerability.asset}
                      </div>
                    </TableCell>
                    <TableCell>
                      <Badge variant={getRiskBadgeColor(match.kevEntry.knownRansomwareCampaignUse)}>
                        {match.kevEntry.knownRansomwareCampaignUse}
                      </Badge>
                    </TableCell>
                    <TableCell className="text-sm">
                      {formatDate(match.kevEntry.dueDate)}
                    </TableCell>
                    <TableCell>
                      {match.kevEntry.notes && (
                        <a
                          href={match.kevEntry.notes.split(';')[0]?.trim()}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="inline-flex items-center gap-1 text-sm text-primary hover:underline"
                        >
                          <ExternalLink className="h-3 w-3" />
                          Details
                        </a>
                      )}
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        )}
      </CardContent>
    </Card>
  );
};