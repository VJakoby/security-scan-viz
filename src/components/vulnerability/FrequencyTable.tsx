import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Vulnerability } from '@/types/vulnerability';
import { Hash, FileText } from 'lucide-react';

interface FrequencyTableProps {
  vulnerabilities: Vulnerability[];
  field: 'id' | 'title';
}

export const FrequencyTable = ({ vulnerabilities, field }: FrequencyTableProps) => {
  const fieldCount = vulnerabilities.reduce((acc, vuln) => {
    const value = vuln[field] || 'Unknown';
    acc[value] = (acc[value] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  const sortedItems = Object.entries(fieldCount)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 10);

  const getFrequencyLevel = (count: number) => {
    if (count >= 10) return { level: 'High', variant: 'destructive' as const };
    if (count >= 5) return { level: 'Medium', variant: 'secondary' as const };
    if (count >= 2) return { level: 'Low', variant: 'outline' as const };
    return { level: 'Single', variant: 'outline' as const };
  };

  const title = field === 'id' ? 'Top 10 Vulnerability IDs' : 'Top 10 Vulnerability Titles';
  const description = field === 'id' 
    ? 'Most frequently occurring vulnerability identifiers'
    : 'Most frequently occurring vulnerability titles';
  const icon = field === 'id' ? Hash : FileText;
  const Icon = icon;

  return (
    <Card className="bg-gradient-card shadow-card">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Icon className="h-5 w-5 text-primary" />
          {title}
        </CardTitle>
        <CardDescription>
          {description}
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Rank</TableHead>
              <TableHead>{field === 'id' ? 'ID/CVE' : 'Title'}</TableHead>
              <TableHead className="text-right">Count</TableHead>
              <TableHead className="text-right">Percentage</TableHead>
              <TableHead>Frequency</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {sortedItems.map(([item, count], index) => {
              const percentage = ((count / vulnerabilities.length) * 100).toFixed(1);
              const frequency = getFrequencyLevel(count);
              
              return (
                <TableRow key={item}>
                  <TableCell className="font-medium">#{index + 1}</TableCell>
                  <TableCell className="font-mono text-sm max-w-xs truncate" title={item}>
                    {item}
                  </TableCell>
                  <TableCell className="text-right font-semibold">
                    {count}
                  </TableCell>
                  <TableCell className="text-right text-muted-foreground">
                    {percentage}%
                  </TableCell>
                  <TableCell>
                    <Badge variant={frequency.variant}>
                      {frequency.level}
                    </Badge>
                  </TableCell>
                </TableRow>
              );
            })}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
};