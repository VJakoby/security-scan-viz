import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { SeverityCount } from '@/types/vulnerability';
import { Shield, TrendingUp, AlertTriangle, Info } from 'lucide-react';

interface VulnerabilitySummaryProps {
  severityCount: SeverityCount;
  totalVulnerabilities: number;
}

export const VulnerabilitySummary = ({ severityCount, totalVulnerabilities }: VulnerabilitySummaryProps) => {
  const criticalAndHigh = severityCount.Critical + severityCount.High;
  const riskLevel = criticalAndHigh > totalVulnerabilities * 0.3 ? 'High' : 
                   criticalAndHigh > totalVulnerabilities * 0.1 ? 'Medium' : 'Low';

  const stats = [
    {
      label: 'Total Vulnerabilities',
      value: totalVulnerabilities,
      icon: Shield,
      color: 'text-primary'
    },
    {
      label: 'Critical & High',
      value: criticalAndHigh,
      icon: AlertTriangle,
      color: 'text-destructive'
    },
    {
      label: 'Risk Level',
      value: riskLevel,
      icon: TrendingUp,
      color: riskLevel === 'High' ? 'text-destructive' : 
             riskLevel === 'Medium' ? 'text-yellow-600' : 'text-green-600'
    }
  ];

  return (
    <Card className="bg-gradient-card shadow-card">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Info className="h-5 w-5 text-primary" />
          Summary
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="grid grid-cols-1 gap-4">
          {stats.map((stat) => {
            const Icon = stat.icon;
            return (
              <div key={stat.label} className="flex items-center justify-between p-3 rounded-lg bg-muted/20">
                <div className="flex items-center gap-3">
                  <Icon className={`h-5 w-5 ${stat.color}`} />
                  <span className="font-medium">{stat.label}</span>
                </div>
                <Badge variant="outline" className="font-mono text-lg px-3 py-1">
                  {stat.value}
                </Badge>
              </div>
            );
          })}
        </div>

        <div className="space-y-3">
          <h4 className="font-semibold text-sm">Breakdown by Severity</h4>
          {Object.entries(severityCount).map(([severity, count]) => (
            <div key={severity} className="flex justify-between items-center">
              <span className="text-sm">{severity}</span>
              <Badge 
                variant="outline" 
                className="font-mono"
              >
                {count}
              </Badge>
            </div>
          ))}
        </div>

        {totalVulnerabilities > 0 && (
          <div className="pt-4 border-t border-border">
            <div className="text-xs text-muted-foreground space-y-1">
              <p>• Focus on Critical and High severity vulnerabilities first</p>
              <p>• CVSS scores above 7.0 require immediate attention</p>
              <p>• Consider asset criticality when prioritizing remediation</p>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
};