import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Vulnerability } from '@/types/vulnerability';

interface ServicePortTableProps {
  vulnerabilities: Vulnerability[];
}

export const ServicePortTable = ({ vulnerabilities }: ServicePortTableProps) => {
  const protocolCount = vulnerabilities.reduce((acc, vuln) => {
    const protocol = vuln.protocol || 'Unknown';
    acc[protocol] = (acc[protocol] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  const sortedProtocols = Object.entries(protocolCount)
    .sort(([,a], [,b]) => b - a);

  return (
    <Card className="bg-gradient-card shadow-card">
      <CardHeader>
        <CardTitle>ðŸ“Š Service Port</CardTitle>
      </CardHeader>
      <CardContent>
        {sortedProtocols.length === 0 ? (
          <div className="text-center py-8 text-muted-foreground">
            <p>No service port data found</p>
          </div>
        ) : (
          <div className="overflow-hidden rounded-lg border">
            <Table>
              <TableHeader>
                <TableRow className="bg-muted/50">
                  <TableHead className="font-semibold">Service/Port</TableHead>
                  <TableHead className="font-semibold text-right">Count</TableHead>
                  <TableHead className="font-semibold text-right">Percentage</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {sortedProtocols.map(([protocol, count]) => (
                  <TableRow 
                    key={protocol}
                    className="hover:bg-muted/20 transition-colors"
                  >
                    <TableCell className="font-mono text-sm">{protocol}</TableCell>
                    <TableCell className="text-right">
                      <Badge variant="outline" className="font-mono">
                        {count}
                      </Badge>
                    </TableCell>
                    <TableCell className="text-right text-muted-foreground">
                      {((count / vulnerabilities.length) * 100).toFixed(1)}%
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        )}
      </CardContent>
    </Card>
  );
};