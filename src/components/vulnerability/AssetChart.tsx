import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from 'recharts';
import { Vulnerability } from '@/types/vulnerability';
import { Server } from 'lucide-react';

interface AssetChartProps {
  vulnerabilities: Vulnerability[];
}

export const AssetChart = ({ vulnerabilities }: AssetChartProps) => {
  const assetCount = vulnerabilities.reduce((acc, vuln) => {
    const asset = vuln.asset || 'Unknown';
    acc[asset] = (acc[asset] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  const chartData = Object.entries(assetCount)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 10)
    .map(([asset, count]) => ({
      name: asset,
      value: count,
      percentage: ((count / vulnerabilities.length) * 100).toFixed(1)
    }));

  const colors = [
    'hsl(var(--primary))',
    'hsl(var(--secondary))',
    'hsl(var(--accent))',
    'hsl(var(--muted))',
    '#8884d8',
    '#82ca9d',
    '#ffc658',
    '#ff7c7c',
    '#8dd1e1',
    '#d084d0'
  ];

  const CustomTooltip = ({ active, payload }: any) => {
    if (active && payload && payload.length) {
      const data = payload[0].payload;
      return (
        <div className="bg-popover border border-border rounded-lg p-3 shadow-lg">
          <p className="font-medium">{data.name}</p>
          <p className="text-sm text-muted-foreground">
            Vulnerabilities: {data.value} ({data.percentage}%)
          </p>
        </div>
      );
    }
    return null;
  };

  return (
    <Card className="bg-gradient-card shadow-card">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Server className="h-5 w-5 text-primary" />
          Asset Distribution
        </CardTitle>
        <CardDescription>
          Distribution of vulnerabilities across assets (Top 10)
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="h-80">
          <ResponsiveContainer width="100%" height="100%">
            <PieChart>
              <Pie
                data={chartData}
                cx="50%"
                cy="50%"
                labelLine={false}
                outerRadius={80}
                fill="#8884d8"
                dataKey="value"
                label={({ name, percentage }) => `${name}: ${percentage}%`}
              >
                {chartData.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />
                ))}
              </Pie>
              <Tooltip content={<CustomTooltip />} />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </div>
      </CardContent>
    </Card>
  );
};