import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Tooltip } from 'recharts';
import { Vulnerability } from '@/types/vulnerability';
import { Activity } from 'lucide-react';

interface ScoreChartProps {
  vulnerabilities: Vulnerability[];
}

export const ScoreChart = ({ vulnerabilities }: ScoreChartProps) => {
  // Create score distribution buckets
  const scoreBuckets = {
    '0.0-1.9': 0,
    '2.0-3.9': 0,
    '4.0-6.9': 0,
    '7.0-8.9': 0,
    '9.0-10.0': 0
  };

  vulnerabilities.forEach(vuln => {
    const score = vuln.score || 0;
    if (score < 2.0) scoreBuckets['0.0-1.9']++;
    else if (score < 4.0) scoreBuckets['2.0-3.9']++;
    else if (score < 7.0) scoreBuckets['4.0-6.9']++;
    else if (score < 9.0) scoreBuckets['7.0-8.9']++;
    else scoreBuckets['9.0-10.0']++;
  });

  const chartData = Object.entries(scoreBuckets).map(([range, count]) => ({
    range,
    count,
    percentage: ((count / vulnerabilities.length) * 100).toFixed(1)
  }));

  const CustomTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      const data = payload[0].payload;
      return (
        <div className="bg-popover border border-border rounded-lg p-3 shadow-lg">
          <p className="font-medium">CVSS Score: {label}</p>
          <p className="text-sm text-muted-foreground">
            Count: {data.count} ({data.percentage}%)
          </p>
        </div>
      );
    }
    return null;
  };

  return (
    <Card className="bg-gradient-card shadow-card">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Activity className="h-5 w-5 text-primary" />
          CVSS Score Distribution
        </CardTitle>
        <CardDescription>
          Distribution of vulnerabilities by CVSS score ranges
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="h-80">
          <ResponsiveContainer width="100%" height="100%">
            <BarChart data={chartData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
              <CartesianGrid strokeDasharray="3 3" className="stroke-muted" />
              <XAxis 
                dataKey="range" 
                className="text-xs fill-muted-foreground"
                angle={-45}
                textAnchor="end"
                height={60}
              />
              <YAxis className="text-xs fill-muted-foreground" />
              <Tooltip content={<CustomTooltip />} />
              <Bar 
                dataKey="count" 
                fill="hsl(var(--primary))" 
                radius={[4, 4, 0, 0]}
              />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </CardContent>
    </Card>
  );
};